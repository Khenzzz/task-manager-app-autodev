# GitHub Actions Workflow: Staging Deployment
# Deploys to staging environment when code is merged to staging branch

name: Deploy to Staging

on:
  push:
    branches: [staging]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: 'false'
        type: boolean

env:
  DO_API_TOKEN: ${{ secrets.DO_API_TOKEN }}
  ENVIRONMENT: staging
  APP_NAME: task-manager-staging

jobs:
  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov flake8 black
      
      - name: Run Linting
        run: |
          echo "Running code quality checks..."
          flake8 app/ --count --statistics --max-line-length=88 --exclude=migrations
          echo "‚úÖ Linting completed"
      
      - name: Check Code Formatting
        run: |
          echo "Checking code formatting..."
          black --check app/ --diff
          echo "‚úÖ Code formatting check completed"
      
      - name: Run Security Checks
        run: |
          echo "Running security checks..."
          pip install safety bandit
          safety check --json || echo "‚ö†Ô∏è Security vulnerabilities found"
          bandit -r app/ -f json || echo "‚ö†Ô∏è Security issues found"
          echo "‚úÖ Security checks completed"
      
      - name: Run Unit Tests
        run: |
          echo "Running unit tests..."
          if [ -d "tests" ]; then
            python -m pytest tests/ -v --tb=short --cov=app --cov-report=xml --cov-report=term
          else
            echo "‚ö†Ô∏è No tests directory found, skipping tests"
          fi
          echo "‚úÖ Unit tests completed"
      
      - name: Validate App Spec
        run: |
          echo "Validating DigitalOcean App Spec..."
          # Generate staging app spec
          mkdir -p .do/generated
          
          sed \
            -e "s/\${ENVIRONMENT}/staging/g" \
            -e "s/\${BRANCH}/staging/g" \
            -e "s/\${APP_DOMAIN}/task-manager-staging.ondigitalocean.app/g" \
            -e "s/\${DB_PRODUCTION}/false/g" \
            -e "s/\${SECRET_KEY}/staging-secret-key/g" \
            -e "s/\${JWT_SECRET_KEY}/staging-jwt-secret/g" \
            -e "s/\${CORS_ALLOWED_ORIGINS}/https:\/\/task-manager-staging.ondigitalocean.app/g" \
            -e "s/\${MAIL_SERVER}/smtp.staging.example.com/g" \
            -e "s/\${MAIL_PORT}/587/g" \
            -e "s/\${MAIL_USERNAME}/staging@example.com/g" \
            -e "s/\${MAIL_PASSWORD}/staging-mail-password/g" \
            -e "s/\${REDIS_PASSWORD}/staging-redis-password/g" \
            .do/deploy.template.yaml > .do/generated/staging-spec.yaml
          
          # Update app name
          sed -i "s/name: task-manager-app-staging/name: ${APP_NAME}/g" .do/generated/staging-spec.yaml
          
          echo "‚úÖ App spec validation completed"
      
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: staging-deployment-artifacts
          path: |
            .do/generated/staging-spec.yaml
          retention-days: 7

  deploy-staging:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    needs: test-and-build
    if: success() || github.event.inputs.force_deploy == 'true'
    environment:
      name: staging
      url: https://task-manager-staging.ondigitalocean.app
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: staging-deployment-artifacts
          path: .do/generated/
      
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_API_TOKEN }}
      
      - name: Generate Staging App Spec
        run: |
          # Regenerate with actual secrets
          sed \
            -e "s/\${ENVIRONMENT}/staging/g" \
            -e "s/\${BRANCH}/staging/g" \
            -e "s/\${APP_DOMAIN}/task-manager-staging.ondigitalocean.app/g" \
            -e "s/\${DB_PRODUCTION}/false/g" \
            -e "s/\${SECRET_KEY}/${{ secrets.STAGING_SECRET_KEY }}/g" \
            -e "s/\${JWT_SECRET_KEY}/${{ secrets.STAGING_JWT_SECRET_KEY }}/g" \
            -e "s/\${CORS_ALLOWED_ORIGINS}/https:\/\/task-manager-staging.ondigitalocean.app/g" \
            -e "s/\${MAIL_SERVER}/${{ secrets.STAGING_MAIL_SERVER }}/g" \
            -e "s/\${MAIL_PORT}/${{ secrets.STAGING_MAIL_PORT }}/g" \
            -e "s/\${MAIL_USERNAME}/${{ secrets.STAGING_MAIL_USERNAME }}/g" \
            -e "s/\${MAIL_PASSWORD}/${{ secrets.STAGING_MAIL_PASSWORD }}/g" \
            -e "s/\${REDIS_PASSWORD}/${{ secrets.STAGING_REDIS_PASSWORD }}/g" \
            .do/deploy.template.yaml > .do/generated/staging-spec.yaml
          
          # Update app name
          sed -i "s/name: task-manager-app-staging/name: ${APP_NAME}/g" .do/generated/staging-spec.yaml
      
      - name: Check if Staging App Exists
        id: check_app
        run: |
          if doctl apps list --format Name --no-header | grep -q "^${APP_NAME}$"; then
            echo "app_exists=true" >> $GITHUB_OUTPUT
            APP_ID=$(doctl apps list --format ID,Name --no-header | grep "${APP_NAME}" | cut -d' ' -f1)
            echo "app_id=${APP_ID}" >> $GITHUB_OUTPUT
            echo "Found existing staging app with ID: ${APP_ID}"
          else
            echo "app_exists=false" >> $GITHUB_OUTPUT
            echo "Staging app does not exist, will create new one"
          fi
      
      - name: Create Staging App
        if: steps.check_app.outputs.app_exists == 'false'
        id: create_app
        run: |
          echo "Creating new staging app..."
          APP_ID=$(doctl apps create .do/generated/staging-spec.yaml --format ID --no-header)
          echo "app_id=${APP_ID}" >> $GITHUB_OUTPUT
          echo "‚úÖ Created staging app with ID: ${APP_ID}"
      
      - name: Update Staging App
        if: steps.check_app.outputs.app_exists == 'true'
        run: |
          APP_ID=${{ steps.check_app.outputs.app_id }}
          echo "Updating existing staging app with ID: ${APP_ID}..."
          doctl apps update ${APP_ID} --spec .do/generated/staging-spec.yaml
          echo "‚úÖ Updated staging app"
      
      - name: Wait for Deployment to Complete
        id: deployment
        run: |
          APP_ID=${{ steps.check_app.outputs.app_id || steps.create_app.outputs.app_id }}
          echo "Waiting for deployment to complete for app ID: ${APP_ID}"
          
          DEPLOYMENT_START=$(date +%s)
          TIMEOUT=900  # 15 minutes
          
          while true; do
            CURRENT_TIME=$(date +%s)
            ELAPSED=$((CURRENT_TIME - DEPLOYMENT_START))
            
            if [ $ELAPSED -gt $TIMEOUT ]; then
              echo "‚ùå Deployment timeout after 15 minutes"
              exit 1
            fi
            
            STATUS=$(doctl apps get ${APP_ID} --format Phase --no-header)
            echo "‚è≥ Deployment status: ${STATUS} (${ELAPSED}s elapsed)"
            
            case "${STATUS}" in
              "ACTIVE")
                echo "‚úÖ Deployment completed successfully!"
                break
                ;;
              "ERROR"|"CANCELED")
                echo "‚ùå Deployment failed with status: ${STATUS}"
                # Get deployment logs for debugging
                doctl apps logs ${APP_ID} --type deploy --follow=false || true
                exit 1
                ;;
              "BUILDING"|"DEPLOYING"|"PENDING_BUILD"|"PENDING_DEPLOY")
                # Continue waiting
                ;;
              *)
                echo "‚ö†Ô∏è Unknown deployment status: ${STATUS}"
                ;;
            esac
            
            sleep 15
          done
          
          # Get final app URL
          APP_URL=$(doctl apps get ${APP_ID} --format LiveURL --no-header)
          echo "app_url=${APP_URL}" >> $GITHUB_OUTPUT
          echo "üåê Staging app URL: ${APP_URL}"
      
      - name: Perform Health Check
        run: |
          APP_URL="${{ steps.deployment.outputs.app_url }}"
          
          echo "üè• Performing health check on: ${APP_URL}"
          
          # Wait for app to be fully ready
          sleep 30
          
          # Comprehensive health check
          HEALTH_CHECK_PASSED=false
          
          for i in {1..10}; do
            echo "üîç Health check attempt ${i}/10..."
            
            # Check basic health endpoint
            if curl -f -s "${APP_URL}/health" > /dev/null; then
              echo "‚úÖ Basic health check passed"
              
              # Check WebSocket status
              if curl -f -s "${APP_URL}/websocket/status" > /dev/null; then
                echo "‚úÖ WebSocket health check passed"
                HEALTH_CHECK_PASSED=true
                break
              else
                echo "‚ö†Ô∏è WebSocket health check failed"
              fi
            else
              echo "‚ùå Basic health check failed"
            fi
            
            if [ $i -lt 10 ]; then
              echo "‚è≥ Waiting 15 seconds before retry..."
              sleep 15
            fi
          done
          
          if [ "$HEALTH_CHECK_PASSED" = "false" ]; then
            echo "‚ùå Health checks failed after 10 attempts"
            exit 1
          fi
          
          echo "‚úÖ All health checks passed!"
      
      - name: Run Smoke Tests
        run: |
          APP_URL="${{ steps.deployment.outputs.app_url }}"
          
          echo "üß™ Running smoke tests against: ${APP_URL}"
          
          # Test API endpoints
          echo "Testing API health endpoint..."
          curl -f "${APP_URL}/health" | jq '.'
          
          echo "Testing WebSocket status endpoint..."
          curl -f "${APP_URL}/websocket/status" | jq '.'
          
          # Test static assets (if available)
          echo "Testing static assets..."
          curl -f -I "${APP_URL}/static/css/style.css" || echo "‚ö†Ô∏è CSS file not found"
          curl -f -I "${APP_URL}/static/js/app.js" || echo "‚ö†Ô∏è JS file not found"
          
          echo "‚úÖ Smoke tests completed"
      
      - name: Notify Deployment Status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const success = '${{ job.status }}' === 'success';
            const appUrl = '${{ steps.deployment.outputs.app_url }}';
            const commitSha = '${{ github.sha }}';
            const commitMessage = `${{ github.event.head_commit.message }}`.split('\n')[0];
            
            const title = success ? 'üöÄ Staging Deployment Successful' : '‚ùå Staging Deployment Failed';
            const color = success ? 'green' : 'red';
            const emoji = success ? '‚úÖ' : '‚ùå';
            
            const body = `## ${title}
            
            **Environment:** Staging
            **Status:** ${success ? 'Success' : 'Failed'}
            **URL:** ${success ? appUrl : 'N/A'}
            **Commit:** \`${commitSha.substring(0, 7)}\`
            **Message:** ${commitMessage}
            
            ### Deployment Details
            - **Branch:** staging
            - **Workflow:** [Staging Deploy](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - **Timestamp:** ${new Date().toISOString()}
            
            ${success ? `
            ### üéØ Next Steps
            - Test the staging environment thoroughly
            - Verify all features including WebSocket functionality
            - Check database migrations and data integrity
            - Prepare for production deployment when ready
            ` : `
            ### üîß Troubleshooting
            - Check the [workflow logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - Review DigitalOcean App Platform logs
            - Verify environment variables and secrets
            - Check database connectivity and migrations
            `}
            
            ---
            *Deployed by GitHub Actions*`;
            
            // Create an issue for failed deployments
            if (!success) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `üö® Staging Deployment Failed - ${commitSha.substring(0, 7)}`,
                body: body,
                labels: ['deployment', 'staging', 'bug']
              });
            }

  post-deployment:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: success()
    
    steps:
      - name: Update Deployment Badge
        run: |
          echo "Updating deployment status badge..."
          # This could update a status badge or external monitoring system
          
      - name: Notify Team
        run: |
          echo "üéâ Staging deployment completed successfully!"
          echo "üåê Environment: https://task-manager-staging.ondigitalocean.app"
          echo "üìù Commit: ${{ github.sha }}"
          echo "‚è∞ Deployed at: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"